private boolean detectBadgerFishFormat(JsonNode jsonNode) {
    // Iterate over the field names (keys) of the JSON object
    Iterator<String> fieldNames = jsonNode.fieldNames();
    
    while (fieldNames.hasNext()) {
        String key = fieldNames.next();
        JsonNode value = jsonNode.get(key);  // Get the value of the current key
        
        // Check if the key starts with '@' or is '$'
        if (key.startsWith("@") || key.equals("$")) {
            return true;
        }
        
        // If the value is a nested object, recursively check inside it
        if (value.isObject() && detectBadgerFishFormat(value)) {
            return true;  // If any nested object follows the BadgerFish format, return true
        }
        
        // If the value is an array, check each element in the array
        if (value.isArray()) {
            for (JsonNode arrayItem : value) {
                if (arrayItem.isObject() && detectBadgerFishFormat(arrayItem)) {
                    return true;  // If any object in the array follows the BadgerFish format, return true
                }
            }
        }
    }
    
    // If no BadgerFish keys are found, return false
    return false;
}





_-----------


package com.example.demo.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.springframework.stereotype.Service;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.StringWriter;
import java.util.Iterator;

@Service
public class JsonToXMLConverter {

    private final ObjectMapper objectMapper = new ObjectMapper();

    public String convertJsonToXml(JsonNode jsonNodeInput) throws Exception {
        // Create the Document object for XML conversion
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.newDocument();

        // Detect if the input JSON follows the BadgerFish convention
        boolean isBadgerFish = detectBadgerFishFormat(jsonNodeInput);

        // Create root element based on JSON format (BadgerFish or Normal)
        Element root = isBadgerFish
                ? createElementFromBadgerFishJsonNode(jsonNodeInput, document)
                : createElementFromNormalJsonNode(jsonNodeInput, document);

        document.appendChild(root);

        return documentToXmlString(document);
    }

    private boolean detectBadgerFishFormat(JsonNode jsonNode) {
        Iterator<String> fieldNames = jsonNode.fieldNames();
        while (fieldNames.hasNext()) {
            String key = fieldNames.next();
            if (key.startsWith("@") || key.equals("$")) {
                return true;
            }
        }
        return false;
    }

    private Element createElementFromBadgerFishJsonNode(JsonNode jsonNode, Document document) throws Exception {
        Iterator<String> fieldNames = jsonNode.fieldNames();
        Element rootElement = null;

        while (fieldNames.hasNext()) {
            String key = fieldNames.next();
            JsonNode value = jsonNode.get(key);

            if (rootElement == null) {
                rootElement = createElementWithValidation(key, document);
            }

            if (value.isObject()) {
                processBadgerFishJsonNode(value, rootElement, document);
            } else if (value.isArray()) {
                processBadgerFishJsonArray(value, key, rootElement, document);
            }
        }

        return rootElement;
    }

    private void processBadgerFishJsonNode(JsonNode jsonNode, Element parentElement, Document document) throws Exception {
        Iterator<String> fieldNames = jsonNode.fieldNames();

        while (fieldNames.hasNext()) {
            String key = fieldNames.next();
            JsonNode value = jsonNode.get(key);

            if (key.startsWith("@")) {
                parentElement.setAttribute(key.substring(1), sanitizeValue(value.asText()));
            } else if (key.equals("$")) {
                parentElement.appendChild(document.createTextNode(sanitizeValue(value.asText())));
            } else if (value.isObject()) {
                Element childElement = createElementWithValidation(key, document);
                parentElement.appendChild(childElement);
                processBadgerFishJsonNode(value, childElement, document);
            } else if (value.isArray()) {
                processBadgerFishJsonArray(value, key, parentElement, document);
            }
        }
    }

    private void processBadgerFishJsonArray(JsonNode jsonArray, String key, Element parentElement, Document document) throws Exception {
        for (JsonNode arrayItem : jsonArray) {
            if (arrayItem.isObject()) {
                Element arrayElement = createElementWithValidation(key, document);
                parentElement.appendChild(arrayElement);
                processBadgerFishJsonNode(arrayItem, arrayElement, document);
            }
        }
    }

    private Element createElementFromNormalJsonNode(JsonNode jsonNode, Document document) throws Exception {
        Iterator<String> fieldNames = jsonNode.fieldNames();
        Element rootElement = null;

        while (fieldNames.hasNext()) {
            String key = fieldNames.next();
            JsonNode value = jsonNode.get(key);

            if (rootElement == null) {
                rootElement = createElementWithValidation(key, document);
            }

            if (value.isObject()) {
                processNormalJsonNode(value, rootElement, document);
            } else if (value.isArray()) {
                processNormalJsonArray(value, key, rootElement, document);
            } else {
                Element childElement = createElementWithValidation(key, document);
                childElement.appendChild(document.createTextNode(sanitizeValue(value.asText())));
                rootElement.appendChild(childElement);
            }
        }

        return rootElement;
    }

    private void processNormalJsonNode(JsonNode jsonNode, Element parentElement, Document document) throws Exception {
        Iterator<String> fieldNames = jsonNode.fieldNames();

        while (fieldNames.hasNext()) {
            String key = fieldNames.next();
            JsonNode value = jsonNode.get(key);

            if (value.isObject()) {
                Element childElement = createElementWithValidation(key, document);
                parentElement.appendChild(childElement);
                processNormalJsonNode(value, childElement, document);
            } else if (value.isArray()) {
                processNormalJsonArray(value, key, parentElement, document);
            } else {
                Element childElement = createElementWithValidation(key, document);
                childElement.appendChild(document.createTextNode(sanitizeValue(value.asText())));
                parentElement.appendChild(childElement);
            }
        }
    }

    private void processNormalJsonArray(JsonNode jsonArray, String key, Element parentElement, Document document) throws Exception {
        for (JsonNode arrayItem : jsonArray) {
            Element arrayElement = createElementWithValidation(key, document);
            if (arrayItem.isObject()) {
                parentElement.appendChild(arrayElement);
                processNormalJsonNode(arrayItem, arrayElement, document);
            } else {
                arrayElement.appendChild(document.createTextNode(sanitizeValue(arrayItem.asText())));
                parentElement.appendChild(arrayElement);
            }
        }
    }

    private Element createElementWithValidation(String key, Document document) throws Exception {
        String sanitizedKey = key.replaceAll("[^a-zA-Z0-9_:.]", "_");
        return document.createElement(sanitizedKey);
    }

    private String sanitizeValue(String value) {
        return value.replaceAll("[^\\x20-\\x7E]", "_");
    }

    private String documentToXmlString(Document document) throws Exception {
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();

        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");

        StringWriter writer = new StringWriter();
        transformer.transform(new DOMSource(document), new StreamResult(writer));

        return writer.toString();
    }
}
